buildscript {
    ext {
        vXnat = "1.7.6"
    }
}

plugins {
    id "idea"
    id "java"
    id "maven-publish"
    id "io.spring.dependency-management" version "1.0.9.RELEASE"
    id "io.franzbecker.gradle-lombok" version "3.2.0"
}

group "org.nrg"
version "2.1.1-SNAPSHOT"

sourceCompatibility = 1.7
targetCompatibility = 1.7

def vMockito = "1.10.19"
def vJavassist = "3.21.0-GA"
def vAwaitility = "2.0.0"

repositories {
    jcenter()
    mavenCentral()
    maven { url "https://nrgxnat.jfrog.io/nrgxnat/libs-release" }
    maven { url "https://nrgxnat.jfrog.io/nrgxnat/libs-snapshot" }
}

dependencyManagement {
    imports {
        mavenBom("org.nrg:parent:${vXnat}") {
            bomProperties([
                    "mockito.version": vMockito,
                    "javassist.version": vJavassist
            ])
        }
    }
}

// I would prefer to use a floating version for docker client, like 8+, but they moved to java 8 and we are stuck on 7.
// Once we can move to java 8 I want to put this back to a floating version. That way we always get the latest updates.
def vDockerClient = "8.13.0"

def vJsonPath = "2.2.0"
def vAutoValue = "1.3"
def vPowerMock = "1.7.0"
def vGson = "2.8.1"
def vJackson = dependencyManagement.importedProperties["jackson.version"]
def vSpringSecurity = dependencyManagement.importedProperties["spring-security.version"]

// Use this configuration to put dependencies into the fat jar
configurations {
    implementation.extendsFrom(implementAndInclude)
}
configurations.all {
    resolutionStrategy.force "org.mockito:mockito-core:${vMockito}"
}

dependencies {
    annotationProcessor "org.nrg:framework"
    annotationProcessor "com.google.auto.value:auto-value:${vAutoValue}"

    compileOnly "com.google.auto.value:auto-value:${vAutoValue}"

    implementAndInclude ("com.spotify:docker-client:${vDockerClient}") {
        exclude group: "ch.qos.logback"
        exclude group: "com.fasterxml.jackson.core"
        exclude group: "com.fasterxml.jackson.datatype"
    }
    implementAndInclude "com.jayway.jsonpath:json-path:${vJsonPath}"

    implementation ("org.nrg.xnat:web") {
        transitive = false
    }
    implementation "org.nrg:framework"
    implementation ("org.nrg.xdat:core") {
        transitive = false
    }
    implementation ("org.nrg.xnat:xnat-data-models") {
        transitive = false
    }
    implementation "org.nrg:prefs"
    implementation ("org.nrg:notify") {
        exclude group: "cglib"
    }
    implementation ("org.nrg:config") {
        exclude group: "cglib"
    }
    implementation ("org.nrg:automation") {
        exclude group: "org.python"
        exclude group: "cglib"
    }
    implementation ("cglib:cglib:2.2.2") {
        exclude group: "asm"
    }

    implementation "org.springframework:spring-beans"
    implementation "org.springframework:spring-context"
    implementation "org.springframework:spring-core"
    implementation "org.springframework:spring-tx"
    implementation "org.springframework:spring-web"
    implementation "org.springframework:spring-webmvc"

    implementation "io.springfox:springfox-swagger2"
    implementation "io.springfox:springfox-swagger-ui"

    implementation "org.hibernate:hibernate-core"

    implementation "com.fasterxml.jackson.core:jackson-annotations"
    implementation "com.fasterxml.jackson.core:jackson-core"
    implementation "com.fasterxml.jackson.core:jackson-databind"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-guava:${vJackson}"

    implementation "org.slf4j:slf4j-api"
    implementation "org.slf4j:slf4j-log4j12"
    implementation "org.projectlombok:lombok"

    implementation "commons-lang:commons-lang"

    implementation "javax.inject:javax.inject"
    implementation "javax.servlet:javax.servlet-api"

    implementation ("turbine:turbine") {
        transitive = false
    }
    implementation ("org.apache.velocity:velocity") {
        transitive = false
    }
    implementation ("stratum:stratum") {
        transitive = false
    }
    implementation ("xalan:xalan") {
        transitive = false
    }

    testImplementation "junit:junit"
    testImplementation "org.hamcrest:hamcrest-library"
    testImplementation "org.springframework:spring-test"
    testImplementation "org.springframework.security:spring-security-test:${vSpringSecurity}"
    testImplementation "org.springframework.security:spring-security-config"
    testImplementation "org.mockito:mockito-core"
    testImplementation "javax.servlet:javax.servlet-api"
    testImplementation "com.h2database:h2"
    testImplementation "org.springframework:spring-jdbc"
    testImplementation "org.springframework:spring-orm"
    testImplementation "com.google.code.gson:gson:${vGson}"
    testImplementation "org.json:json"
    testImplementation "org.apache.commons:commons-dbcp2"
    testImplementation "org.powermock:powermock-module-junit4:${vPowerMock}"
    testImplementation "org.powermock:powermock-api-mockito:${vPowerMock}"
    testImplementation "org.awaitility:awaitility:${vAwaitility}"
}

task unitTest( type: Test ) {
    exclude "**/DockerControlApiTest.class", "**/*IntegrationTest.class"
}

task fatJar(type: Jar) {
    zip64 true
    classifier = "fat"
    from {
        configurations.implementAndInclude.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    duplicatesStrategy "exclude"
    with jar
}

sourceSets.main.java {
    srcDir "generated"
    exclude "*/AutoValue.java"
}

jar{
    doLast {
        throw new GradleException("ERROR:  You should run fatJar instead of jar task for this plugin")
    }
}

task sourceJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifact sourceJar {
                classifier "sources"
            }

            artifact javadocJar {
                classifier "javadoc"
            }

            artifact fatJar

            pom.withXml {
                def root = asNode()
                root.appendNode("name", "XNAT Container Service")
                root.appendNode("description", "XNAT plugin for launching and managing containers.")
                root.appendNode("url", "https://github.com/nrgxnat/container-service")
                root.appendNode("inceptionYear", "2016")

                def scm = root.appendNode("scm")
                scm.appendNode("url", "https://github.com/nrgxnat/container-service")
                scm.appendNode("connection", "scm:https://github.com/nrgxnat/container-service.git")
                scm.appendNode("developerConnection", "scm:git@github.com:nrgxnat/container-service")

                def license = root.appendNode("licenses").appendNode("license")
                license.appendNode("name", "Simplified BSD 2-Clause License")
                license.appendNode("url", "https://xnat.org/about/license.php")
                license.appendNode("distribution", "repo")

                def developers = root.appendNode("developers")
                def flavin = developers.appendNode("developer")
                flavin.appendNode("id", "jflavin")
                flavin.appendNode("name", "John Flavin")
                flavin.appendNode("email", "jflavin@wustl.edu")

                def kelsey = developers.appendNode("developer")
                kelsey.appendNode("id", "kelseym")
                kelsey.appendNode("name", "Matt Kelsey")
                kelsey.appendNode("email", "kelseym@wustl.edu")

                def will = developers.appendNode("developer")
                will.appendNode("id", "hortonw")
                will.appendNode("name", "Will Horton")
                will.appendNode("email", "hortonw@wustl.edu")
            }
        }
    }
    repositories {
        maven {
            credentials {
                // These properties must be set in the ~/.gradle/gradle.properties file or passed on the Gradle command
                // line in the form -PrepoUsername=foo -PrepoPassword=bar.
                username propertyWithDefault("repoUsername", "username")
                password propertyWithDefault("repoPassword", "password")
            }
            if (project.version.endsWith("-SNAPSHOT")) {
                url "https://nrgxnat.jfrog.io/nrgxnat/libs-snapshot-local"
            } else {
                url "https://nrgxnat.jfrog.io/nrgxnat/libs-release-local"
            }
        }
    }
}

def propertyWithDefault(def String property, def Object value) {
    hasProperty(property) ? getProperty(property) : value
}
